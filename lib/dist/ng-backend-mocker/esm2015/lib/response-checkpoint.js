import { HttpHeaders } from "@angular/common/http";
export class ResponseCheckPoint {
    constructor() {
        this.method = 'GET';
        this.path = '';
        this.responseCode = 200;
        this.responseHeaders = new HttpHeaders();
        this.method = 'GET';
        this.path = '';
        this.responseBody = null;
        this.responseCode = 200;
        this.responseHeaders = new HttpHeaders();
        this.requestSelector = (req, rcp) => true;
    }
    withMethod(method) {
        this.method = method;
        return this;
    }
    withPath(path) {
        this.path = path;
        return this;
    }
    withBody(body) {
        this.responseBody = body;
        return this;
    }
    withCode(code) {
        this.responseCode = code;
        return this;
    }
    withHeader(key, value) {
        this.responseHeaders.append(key, value);
        return this;
    }
    withSelector(selector) {
        this.requestSelector = selector;
        return this;
    }
    selectByPathOnly() {
        this.requestSelector = (req, rcp) => req.url == rcp.path;
        return this;
    }
    selectByPathAndMethod() {
        this.requestSelector = (req, rcp) => req.url == rcp.path && req.method.toLowerCase() == rcp.method.toLowerCase();
        return this;
    }
    selectAll() {
        this.requestSelector = (req, rcp) => true;
        return this;
    }
    accepts(req) {
        return this.requestSelector(req, this);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UtY2hlY2twb2ludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWJhY2tlbmQtbW9ja2VyL3NyYy9saWIvcmVzcG9uc2UtY2hlY2twb2ludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFPaEUsTUFBTSxPQUFPLGtCQUFrQjtJQWdCM0I7UUFiTyxXQUFNLEdBQVcsS0FBSyxDQUFDO1FBRXZCLFNBQUksR0FBVyxFQUFFLENBQUM7UUFJbEIsaUJBQVksR0FBVyxHQUFHLENBQUM7UUFFM0Isb0JBQWUsR0FBZ0IsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQU9wRCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUN6QyxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsR0FBcUIsRUFBRSxHQUF1QixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDcEYsQ0FBQztJQUVNLFVBQVUsQ0FBQyxNQUFjO1FBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxRQUFRLENBQUMsSUFBWTtRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sUUFBUSxDQUFDLElBQVM7UUFDckIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxJQUFZO1FBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxVQUFVLENBQUMsR0FBVyxFQUFFLEtBQWE7UUFFeEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxZQUFZLENBQUMsUUFBc0Q7UUFDdEUsSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUM7UUFDaEMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLGdCQUFnQjtRQUVuQixJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsR0FBcUIsRUFBRSxHQUF1QixFQUFFLEVBQUUsQ0FDdEUsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ3hCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFHTSxxQkFBcUI7UUFFeEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLEdBQXFCLEVBQUUsR0FBdUIsRUFBRSxFQUFFLENBQ3RFLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEYsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLFNBQVM7UUFFWixJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsR0FBcUIsRUFBRSxHQUF1QixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDaEYsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLE9BQU8sQ0FBQyxHQUFxQjtRQUVoQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBIZWFkZXJzLCBIdHRwUmVxdWVzdCB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuXG5cblxuXG5cblxuZXhwb3J0IGNsYXNzIFJlc3BvbnNlQ2hlY2tQb2ludCB7XG5cblxuICAgIHB1YmxpYyBtZXRob2Q6IHN0cmluZyA9ICdHRVQnO1xuXG4gICAgcHVibGljIHBhdGg6IHN0cmluZyA9ICcnO1xuXG4gICAgcHVibGljIHJlc3BvbnNlQm9keTogYW55O1xuXG4gICAgcHVibGljIHJlc3BvbnNlQ29kZTogbnVtYmVyID0gMjAwO1xuXG4gICAgcHVibGljIHJlc3BvbnNlSGVhZGVyczogSHR0cEhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcblxuICAgIHB1YmxpYyByZXF1ZXN0U2VsZWN0b3I6IChIdHRwUmVxdWVzdCwgUmVzcG9uc2VDaGVja1BvaW50KSA9PiBib29sZWFuO1xuXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcblxuICAgICAgICB0aGlzLm1ldGhvZCA9ICdHRVQnO1xuICAgICAgICB0aGlzLnBhdGggPSAnJztcbiAgICAgICAgdGhpcy5yZXNwb25zZUJvZHkgPSBudWxsO1xuICAgICAgICB0aGlzLnJlc3BvbnNlQ29kZSA9IDIwMDtcbiAgICAgICAgdGhpcy5yZXNwb25zZUhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0U2VsZWN0b3IgPSAocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCByY3A6IFJlc3BvbnNlQ2hlY2tQb2ludCkgPT4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgd2l0aE1ldGhvZChtZXRob2Q6IHN0cmluZyk6IFJlc3BvbnNlQ2hlY2tQb2ludCB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgd2l0aFBhdGgocGF0aDogc3RyaW5nKTogUmVzcG9uc2VDaGVja1BvaW50IHtcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHdpdGhCb2R5KGJvZHk6IGFueSk6IFJlc3BvbnNlQ2hlY2tQb2ludCB7XG4gICAgICAgIHRoaXMucmVzcG9uc2VCb2R5ID0gYm9keTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHdpdGhDb2RlKGNvZGU6IG51bWJlcik6IFJlc3BvbnNlQ2hlY2tQb2ludCB7XG4gICAgICAgIHRoaXMucmVzcG9uc2VDb2RlID0gY29kZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHdpdGhIZWFkZXIoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBSZXNwb25zZUNoZWNrUG9pbnQge1xuXG4gICAgICAgIHRoaXMucmVzcG9uc2VIZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHdpdGhTZWxlY3RvcihzZWxlY3RvcjogKEh0dHBSZXF1ZXN0LCBSZXNwb25zZUNoZWNrUG9pbnQpID0+IGJvb2xlYW4pOiBSZXNwb25zZUNoZWNrUG9pbnQge1xuICAgICAgICB0aGlzLnJlcXVlc3RTZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2VsZWN0QnlQYXRoT25seSgpOiBSZXNwb25zZUNoZWNrUG9pbnQge1xuXG4gICAgICAgIHRoaXMucmVxdWVzdFNlbGVjdG9yID0gKHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgcmNwOiBSZXNwb25zZUNoZWNrUG9pbnQpID0+XG4gICAgICAgICAgICByZXEudXJsID09IHJjcC5wYXRoO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuICAgIHB1YmxpYyBzZWxlY3RCeVBhdGhBbmRNZXRob2QoKTogUmVzcG9uc2VDaGVja1BvaW50IHtcblxuICAgICAgICB0aGlzLnJlcXVlc3RTZWxlY3RvciA9IChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIHJjcDogUmVzcG9uc2VDaGVja1BvaW50KSA9PlxuICAgICAgICAgICAgcmVxLnVybCA9PSByY3AucGF0aCAmJiByZXEubWV0aG9kLnRvTG93ZXJDYXNlKCkgPT0gcmNwLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2VsZWN0QWxsKCk6UmVzcG9uc2VDaGVja1BvaW50e1xuXG4gICAgICAgIHRoaXMucmVxdWVzdFNlbGVjdG9yID0gKHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgcmNwOiBSZXNwb25zZUNoZWNrUG9pbnQpID0+IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhY2NlcHRzKHJlcTogSHR0cFJlcXVlc3Q8YW55Pik6IGJvb2xlYW4ge1xuXG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3RTZWxlY3RvcihyZXEsIHRoaXMpO1xuICAgIH1cblxufSJdfQ==