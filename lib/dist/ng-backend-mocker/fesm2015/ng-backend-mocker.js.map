{"version":3,"file":"ng-backend-mocker.js","sources":["../../../projects/ng-backend-mocker/src/lib/api-mock-http-interceptor.ts","../../../projects/ng-backend-mocker/src/lib/ng-backend-mocker.module.ts","../../../projects/ng-backend-mocker/src/lib/response-checkpoint.ts","../../../projects/ng-backend-mocker/src/public-api.ts","../../../projects/ng-backend-mocker/src/ng-backend-mocker.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest, HttpResponse } from \"@angular/common/http\";\nimport { Inject, Injectable } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\nimport { IBackendMockDataProvider } from \"./ibackend-mockdata-provider\";\n\n\n@Injectable()\nexport class ApiMockHttpInterceptor implements HttpInterceptor {\n\n\n    constructor(\n        @Inject('IBackendMockDataProvider') private backend: IBackendMockDataProvider,\n        @Inject('env') private environment\n    ) {\n        console.log('Environment: ',environment);\n    }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n\n        if (this.noMock()) {\n\n            return next.handle(req);\n        }\n\n        const interactions = this.backend.getAllInteractions();\n\n        for (const key in interactions) {\n\n            const int = interactions[key];\n\n            if (int.accepts(req)) {\n\n                var handler = new Subject<HttpEvent<any>>();\n\n                console.info(\"Found a response interaction.\");\n\n                var response = new HttpResponse({\n                    body: int.responseBody,\n                    headers: int.responseHeaders,\n                    status: int.responseCode,\n                    url: req.url\n                });\n\n                setTimeout(() => {\n                    handler.next(response);\n                    handler.complete();\n                }, 100);\n\n                return handler;\n            }\n        }\n\n        console.log('redirected to real path');\n        \n        return next.handle(req);\n    }\n\n\n\n    private noMock(): boolean {\n\n        const envAny: any = this.environment;\n\n        if (envAny?.mockBackend) {\n\n            return false;\n        }\n        return true;\n    }\n}","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ApiMockHttpInterceptor } from './api-mock-http-interceptor';\nimport { ResponseCheckPoint } from './response-checkpoint';\nimport { IBackendMockDataProvider } from './ibackend-mockdata-provider'\n\n\n\n@NgModule({\n  declarations: [  ],\n  imports: [\n  ],\n  exports: [\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ApiMockHttpInterceptor,\n      multi: true\n    }\n  ]\n})\nexport class NgBackendMockerModule {\n\n  public static forRoot(environment: any): ModuleWithProviders<any> {\n\n    return {\n      ngModule: NgBackendMockerModule,\n      providers: [\n        {\n          provide: 'env',\n          useValue: environment\n        }\n      ]\n    };\n  }\n}\n","import { HttpHeaders, HttpRequest } from \"@angular/common/http\";\n\n\n\n\n\n\nexport class ResponseCheckPoint {\n\n\n    public method: string = 'GET';\n\n    public path: string = '';\n\n    public responseBody: any;\n\n    public responseCode: number = 200;\n\n    public responseHeaders: HttpHeaders = new HttpHeaders();\n\n    public requestSelector: (HttpRequest, ResponseCheckPoint) => boolean;\n\n\n    constructor() {\n\n        this.method = 'GET';\n        this.path = '';\n        this.responseBody = null;\n        this.responseCode = 200;\n        this.responseHeaders = new HttpHeaders();\n        this.requestSelector = (req: HttpRequest<any>, rcp: ResponseCheckPoint) => true;\n    }\n\n    public withMethod(method: string): ResponseCheckPoint {\n        this.method = method;\n        return this;\n    }\n\n    public withPath(path: string): ResponseCheckPoint {\n        this.path = path;\n        return this;\n    }\n\n    public withBody(body: any): ResponseCheckPoint {\n        this.responseBody = body;\n        return this;\n    }\n\n    public withCode(code: number): ResponseCheckPoint {\n        this.responseCode = code;\n        return this;\n    }\n\n    public withHeader(key: string, value: string): ResponseCheckPoint {\n\n        this.responseHeaders.append(key, value);\n        return this;\n    }\n\n    public withSelector(selector: (HttpRequest, ResponseCheckPoint) => boolean): ResponseCheckPoint {\n        this.requestSelector = selector;\n        return this;\n    }\n\n    public selectByPathOnly(): ResponseCheckPoint {\n\n        this.requestSelector = (req: HttpRequest<any>, rcp: ResponseCheckPoint) =>\n            req.url == rcp.path;\n        return this;\n    }\n\n\n    public selectByPathAndMethod(): ResponseCheckPoint {\n\n        this.requestSelector = (req: HttpRequest<any>, rcp: ResponseCheckPoint) =>\n            req.url == rcp.path && req.method.toLowerCase() == rcp.method.toLowerCase();\n        return this;\n    }\n\n    public selectAll():ResponseCheckPoint{\n\n        this.requestSelector = (req: HttpRequest<any>, rcp: ResponseCheckPoint) => true;\n        return this;\n    }\n\n    public accepts(req: HttpRequest<any>): boolean {\n\n        return this.requestSelector(req, this);\n    }\n\n}","/*\n * Public API Surface of ng-backend-mocker\n */\n\nexport * from './lib/ng-backend-mocker.module';\nexport * from './lib/ibackend-mockdata-provider'\nexport * from './lib/response-checkpoint'\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {ApiMockHttpInterceptor as Éµa} from './lib/api-mock-http-interceptor';"],"names":[],"mappings":"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"}