{"version":3,"sources":["../../../projects/ng-backend-mocker/src/lib/api-mock-http-interceptor.ts","../../../projects/ng-backend-mocker/src/lib/ng-backend-mocker.module.ts","../../../projects/ng-backend-mocker/src/lib/response-checkpoint.ts"],"names":["ApiMockHttpInterceptor","backend","environment","this","console","log","prototype","intercept","req","next","noMock","handle","interactions","getAllInteractions","key","int","accepts","handler","Subject","info","response","HttpResponse","body","responseBody","headers","responseHeaders","status","responseCode","url","setTimeout","complete","envAny","mockBackend","Injectable","Inject","args","NgBackendMockerModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","imports","exports","HTTP_INTERCEPTORS","useClass","multi","ResponseCheckPoint","method","path","HttpHeaders","requestSelector","rcp","withMethod","withPath","withBody","withCode","code","withHeader","value","append","withSelector","selector","selectByPathOnly","selectByPathAndMethod","toLowerCase","selectAll"],"mappings":"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","sourcesContent":["import { HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest, HttpResponse } from \"@angular/common/http\";\nimport { Inject, Injectable } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\nimport { IBackendMockDataProvider } from \"./ibackend-mockdata-provider\";\n\n\n@Injectable()\nexport class ApiMockHttpInterceptor implements HttpInterceptor {\n\n\n    constructor(\n        @Inject('IBackendMockDataProvider') private backend: IBackendMockDataProvider,\n        @Inject('env') private environment\n    ) {\n        console.log('Environment: ',environment);\n    }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n\n        if (this.noMock()) {\n\n            return next.handle(req);\n        }\n\n        const interactions = this.backend.getAllInteractions();\n\n        for (const key in interactions) {\n\n            const int = interactions[key];\n\n            if (int.accepts(req)) {\n\n                var handler = new Subject<HttpEvent<any>>();\n\n                console.info(\"Found a response interaction.\");\n\n                var response = new HttpResponse({\n                    body: int.responseBody,\n                    headers: int.responseHeaders,\n                    status: int.responseCode,\n                    url: req.url\n                });\n\n                setTimeout(() => {\n                    handler.next(response);\n                    handler.complete();\n                }, 100);\n\n                return handler;\n            }\n        }\n\n        console.log('redirected to real path');\n        \n        return next.handle(req);\n    }\n\n\n\n    private noMock(): boolean {\n\n        const envAny: any = this.environment;\n\n        if (envAny?.mockBackend) {\n\n            return false;\n        }\n        return true;\n    }\n}","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ApiMockHttpInterceptor } from './api-mock-http-interceptor';\nimport { ResponseCheckPoint } from './response-checkpoint';\nimport { IBackendMockDataProvider } from './ibackend-mockdata-provider'\n\n\n\n@NgModule({\n  declarations: [  ],\n  imports: [\n  ],\n  exports: [\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ApiMockHttpInterceptor,\n      multi: true\n    }\n  ]\n})\nexport class NgBackendMockerModule {\n\n  public static forRoot(environment: any): ModuleWithProviders<any> {\n\n    return {\n      ngModule: NgBackendMockerModule,\n      providers: [\n        {\n          provide: 'env',\n          useValue: environment\n        }\n      ]\n    };\n  }\n}\n","import { HttpHeaders, HttpRequest } from \"@angular/common/http\";\n\n\n\n\n\n\nexport class ResponseCheckPoint {\n\n\n    public method: string = 'GET';\n\n    public path: string = '';\n\n    public responseBody: any;\n\n    public responseCode: number = 200;\n\n    public responseHeaders: HttpHeaders = new HttpHeaders();\n\n    public requestSelector: (HttpRequest, ResponseCheckPoint) => boolean;\n\n\n    constructor() {\n\n        this.method = 'GET';\n        this.path = '';\n        this.responseBody = null;\n        this.responseCode = 200;\n        this.responseHeaders = new HttpHeaders();\n        this.requestSelector = (req: HttpRequest<any>, rcp: ResponseCheckPoint) => true;\n    }\n\n    public withMethod(method: string): ResponseCheckPoint {\n        this.method = method;\n        return this;\n    }\n\n    public withPath(path: string): ResponseCheckPoint {\n        this.path = path;\n        return this;\n    }\n\n    public withBody(body: any): ResponseCheckPoint {\n        this.responseBody = body;\n        return this;\n    }\n\n    public withCode(code: number): ResponseCheckPoint {\n        this.responseCode = code;\n        return this;\n    }\n\n    public withHeader(key: string, value: string): ResponseCheckPoint {\n\n        this.responseHeaders.append(key, value);\n        return this;\n    }\n\n    public withSelector(selector: (HttpRequest, ResponseCheckPoint) => boolean): ResponseCheckPoint {\n        this.requestSelector = selector;\n        return this;\n    }\n\n    public selectByPathOnly(): ResponseCheckPoint {\n\n        this.requestSelector = (req: HttpRequest<any>, rcp: ResponseCheckPoint) =>\n            req.url == rcp.path;\n        return this;\n    }\n\n\n    public selectByPathAndMethod(): ResponseCheckPoint {\n\n        this.requestSelector = (req: HttpRequest<any>, rcp: ResponseCheckPoint) =>\n            req.url == rcp.path && req.method.toLowerCase() == rcp.method.toLowerCase();\n        return this;\n    }\n\n    public selectAll():ResponseCheckPoint{\n\n        this.requestSelector = (req: HttpRequest<any>, rcp: ResponseCheckPoint) => true;\n        return this;\n    }\n\n    public accepts(req: HttpRequest<any>): boolean {\n\n        return this.requestSelector(req, this);\n    }\n\n}"]}